type AddTentativeDeviceResponse = variant {
  device_registration_mode_off;
  another_device_tentatively_added;
  added_tentatively : record {
    verification_code : text;
    device_registration_timeout : nat64;
  };
};
type AppInfo = record {
  app_id : text;
  current_version : Version;
  latest_version : Version;
  wallet_id : opt principal;
};
type AppType = variant {
  android_app;
  mobile_extension;
  mobile_browser;
  desktop_extension;
  desktop_browser;
  desktop_app;
  ios_app;
};
type BackupExportFormat = variant { JSON; BINARY };
type BackupInfo = record {
  state : BackupStatus;
  last_backup : nat64;
  recent_backup : opt nat64;
};
type BackupJob = record { name : text; amount : nat64 };
type BackupStatus = variant { MAINTAINING; RUNNING };
type ByteReadResponse = record { data : vec nat8; hash : text; name : text };
type ByteWriteRequest = record {
  end : nat64;
  data : vec nat8;
  hash : text;
  name : text;
  start : nat64;
  format : opt BackupExportFormat;
};
type CycleInfo = record {
  records : vec CycleRecord;
  estimate_remaining : nat64;
};
type CycleRecord = record { ts : nat64; balance : nat };
type Delegation = record {
  pubkey : vec nat8;
  targets : opt vec principal;
  expiration : nat64;
};
type DelegationMode = variant { domain; global };
type DeviceAddResponse = variant {
  added : record { user_name : text; user_id : text };
  failed;
};
type DeviceDataExternal = record {
  os_type : opt AppType;
  device_name : text;
  device_type : DeviceType;
  pub_key : vec nat8;
  enable_e2e : opt bool;
  purpose : Purpose;
  credential_id : opt vec nat8;
  resolver_id : opt text;
};
type DeviceDataExternalV1 = record {
  device_type : DeviceType;
  pub_key : vec nat8;
  credential_id : opt vec nat8;
};
type DeviceRemoveResponse = variant { failed; removed };
type DeviceType = variant {
  IdentityProvider;
  RecoveryPhrase;
  SecurityDevice;
  Google;
  EthereumMetaMask;
};
type DeviceUpdateResponse = variant { updated; failed };
type E2EDeviceRequest = record {
  meta : opt vec nat8;
  enc_doc : opt EncDoc;
  pub_key : vec nat8;
};
type EncDoc = record {
  data : vec nat8;
  meta : opt vec nat8;
  manager_pub_key : vec nat8;
};
type GetDelegationResponse = variant {
  no_such_delegation;
  signed_delegation : SignedDelegation;
};
type HardwareWalletAccountDetails = record {
  "principal" : principal;
  name : text;
  account_identifier : text;
};
type InstallControllerResponse = variant { success : principal; failed };
type LogEntry = record { ts : nat64; msg : text; kind : text };
type MEAccountDetails = record {
  "principal" : principal;
  active : bool;
  account_identifier : text;
  hardware_wallet_accounts : vec HardwareWalletAccountDetails;
  wallet_name : text;
  sub_accounts : vec SubAccountDetails;
};
type MEUser = record {
  user_number : nat64;
  user_name : text;
  ego_controller : opt principal;
  e2e_id : opt nat64;
  user_id : opt text;
  tentative : opt TentativeDeviceRegistration;
  devices : vec DeviceDataExternal;
  last_update : nat64;
};
type MeError = record { msg : text; code : nat16 };
type NNSAccountDetails = record {
  "principal" : principal;
  active : bool;
  account_identifier : text;
  hardware_wallet_accounts : vec HardwareWalletAccountDetails;
  ii_anchor : text;
  sub_accounts : vec SubAccountDetails;
};
type PrepareDelegationResponse = record {
  user_key : vec nat8;
  expiration : nat64;
};
type Purpose = variant { authentication; recovery; management };
type RegisterEvent = record {
  user_name : text;
  device_name : text;
  device_type : DeviceType;
  os_version : text;
  os_name : text;
};
type RegisterResponse = variant {
  existed : record { user_name : text };
  canister_full;
  registered : record { user_name : text; user_id : text };
};
type RegistrationState = variant {
  DeviceRegistrationModeActive;
  DeviceTentativelyAdded : record {
    failed_attempts : nat8;
    tentative_device : DeviceDataExternal;
    verification_code : text;
    tentative_principal : principal;
  };
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : BackupInfo; Err : text };
type Result_10 = variant { Ok : AppInfo; Err : text };
type Result_11 = variant {
  Ok : vec record { text; vec principal };
  Err : text;
};
type Result_12 = variant { Ok : vec CycleRecord; Err : text };
type Result_13 = variant { Ok : CycleInfo; Err : text };
type Result_14 = variant { Ok : vec LogEntry; Err : text };
type Result_15 = variant {
  Ok : opt vec record { principal; text };
  Err : text;
};
type Result_16 = variant { Ok : opt ByteReadResponse; Err : text };
type Result_17 = variant { Ok : text; Err : MeError };
type Result_2 = variant { Ok : vec BackupJob; Err : text };
type Result_3 = variant { Ok : nat; Err : text };
type Result_4 = variant { Ok : bool; Err : MeError };
type Result_5 = variant { Ok; Err : MeError };
type Result_6 = variant { Ok : AddTentativeDeviceResponse; Err : text };
type Result_7 = variant { Ok : nat64; Err : text };
type Result_8 = variant { Ok : bool; Err : text };
type Result_9 = variant { Ok : VerifyTentativeDeviceResponse; Err : text };
type SignedDelegation = record {
  signature : vec nat8;
  delegation : Delegation;
};
type SubAccountDetails = record {
  name : text;
  payment_limit : opt nat64;
  sub_account : vec nat8;
  account_identifier : text;
};
type TentativeDeviceRegistration = record {
  state : RegistrationState;
  expiration : nat64;
};
type UpdateMEWalletResponse = variant { success; failed };
type VerifyTentativeDeviceResponse = variant {
  device_registration_mode_off;
  verified;
  wrong_code : record { retries_left : nat8 };
  no_device_to_verify;
};
type VerifyTentativeMode = variant { active; passive };
type Version = record { major : nat32; minor : nat32; patch : nat32 };
service : () -> {
  admin_e2e_reset : (text) -> ();
  admin_list_missing_id_users : () -> (vec text) query;
  admin_salt_get : () -> (opt vec nat8) query;
  admin_salt_set : (vec nat8) -> ();
  admin_user_id_update : (nat64) -> (text);
  admin_user_id_update_batch : (nat64, nat64) -> (Result);
  admin_user_info_get : (nat64) -> (MEUser);
  backup_change_status : (BackupStatus) -> (Result);
  backup_info_get : () -> (Result_1);
  backup_job_list : () -> (Result_2);
  balance_get : () -> (Result_3) query;
  controller_user_get : (text) -> (opt principal) query;
  controller_user_install : (text) -> (InstallControllerResponse);
  controller_user_upgrade : () -> ();
  device_e2e_add : (text, E2EDeviceRequest) -> (DeviceAddResponse);
  device_e2e_manage_pub_key_exists : (text, vec nat8) -> (Result_4);
  device_main_add : (text, DeviceDataExternal, opt E2EDeviceRequest) -> (
      DeviceAddResponse,
    );
  device_main_get : (text, opt DeviceType) -> (vec DeviceDataExternal) query;
  device_main_get_v1 : (text, opt DeviceType) -> (
      vec DeviceDataExternalV1,
    ) query;
  device_main_get_v2 : (text, opt DeviceType) -> (vec DeviceDataExternal) query;
  device_main_recovery : (text, DeviceDataExternal, opt E2EDeviceRequest) -> (
      DeviceAddResponse,
    );
  device_main_remove : (text, vec nat8) -> (DeviceRemoveResponse);
  device_main_update : (text, DeviceDataExternal) -> (DeviceUpdateResponse);
  device_main_update_self : (text, text, opt EncDoc, opt vec nat8) -> (
      Result_5,
    );
  device_tentative_add : (text, principal, DeviceDataExternal) -> (Result_6);
  device_tentative_enter : (text) -> (Result_7);
  device_tentative_exit : (text) -> (Result_8);
  device_tentative_has : (text) -> (bool) query;
  device_tentative_verify : (text, text, VerifyTentativeMode, opt EncDoc) -> (
      Result_9,
    );
  ego_app_info_get : () -> (Result_10) query;
  ego_app_info_update : (opt principal, text, Version) -> ();
  ego_app_version_check : () -> (Result_10);
  ego_canister_add : (text, principal) -> (Result);
  ego_canister_delete : () -> (Result);
  ego_canister_list : () -> (Result_11);
  ego_canister_remove : (text, principal) -> (Result);
  ego_canister_track : () -> (Result);
  ego_canister_untrack : () -> (Result);
  ego_canister_upgrade : () -> (Result);
  ego_controller_add : (principal) -> (Result);
  ego_controller_remove : (principal) -> (Result);
  ego_controller_set : (vec principal) -> (Result);
  ego_cycle_check : () -> (Result);
  ego_cycle_estimate_set : (nat64) -> (Result);
  ego_cycle_history : () -> (Result_12);
  ego_cycle_info : () -> (Result_13);
  ego_cycle_recharge : (nat) -> (Result);
  ego_cycle_threshold_get : () -> (Result_3);
  ego_is_op : () -> (Result_8) query;
  ego_is_owner : () -> (Result_8) query;
  ego_is_user : () -> (Result_8) query;
  ego_log_list : (nat64) -> (Result_14) query;
  ego_op_add : (principal) -> (Result);
  ego_op_list : () -> (Result_15);
  ego_op_remove : (principal) -> (Result);
  ego_owner_add : (principal) -> (Result);
  ego_owner_add_with_name : (text, principal) -> (Result);
  ego_owner_list : () -> (Result_15);
  ego_owner_remove : (principal) -> (Result);
  ego_owner_set : (vec principal) -> (Result);
  ego_runtime_cycle_threshold_get : () -> (Result_3);
  ego_user_add : (principal) -> (Result);
  ego_user_list : () -> (Result_15);
  ego_user_remove : (principal) -> (Result);
  ego_user_set : (vec principal) -> (Result);
  finish_backup : () -> ();
  finish_restore : () -> ();
  id_delegation_get : (
      text,
      text,
      vec nat8,
      DelegationMode,
      nat64,
      opt vec principal,
      bool,
    ) -> (GetDelegationResponse) query;
  id_delegation_prepare : (
      text,
      text,
      vec nat8,
      DelegationMode,
      opt nat64,
      opt vec principal,
      bool,
    ) -> (PrepareDelegationResponse);
  id_user_add : (
      text,
      DeviceDataExternal,
      RegisterEvent,
      opt E2EDeviceRequest,
    ) -> (RegisterResponse);
  is_username_exists : (text) -> (bool);
  job_data_export : (text, nat64, nat64, opt BackupExportFormat, opt nat64) -> (
      Result_16,
    );
  job_data_import : (ByteWriteRequest) -> (Result_8);
  job_data_read : (text, nat64, nat64) -> (Result_8);
  job_data_write : (text, nat64, nat64, bool) -> (Result_8);
  jwt_token_get : (text) -> (opt text) query;
  start_backup : () -> ();
  start_restore : (vec BackupJob) -> ();
  user_name_to_user_id : (text) -> (Result_17) query;
  wallet_me_add : (text, MEAccountDetails) -> (UpdateMEWalletResponse);
  wallet_me_remove : (text, principal) -> (UpdateMEWalletResponse);
  wallet_nns_add : (text, NNSAccountDetails) -> (UpdateMEWalletResponse);
  wallet_nns_remove : (text, text) -> (UpdateMEWalletResponse);
}